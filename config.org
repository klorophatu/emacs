* Basic Interface Settings
** Looks
*** Startup mesasge
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src
*** Disable menus and scrollbars
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
*** Disable bell
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src
*** Set UTF-8 encoding
#+begin_src emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
*** Highligh current line
#+begin_src emacs-lisp
  (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
  (global-hl-line-mode)
#+end_src
*** Column line indicator
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
  (setq fill-column 80)
#+end_src
*** Whitespace
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'whitespace-mode)
  (setq whitespace-style
        (quote
         (face tabs spaces trailing space-before-tab newline indentation empty space-after-tab space-mark tab-mark)))
#+end_src
** Functionality
*** Disable backups
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src
*** Y-or-N
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Async
#+begin_src emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1)
    (async-bytecomp-package-mode 1))
#+end_src
* Editing with sudo
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind
    ("s-e" . sudo-edit))
#+end_src
* Git integration
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
* Latex
** Auctex
#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    :ensure t)
#+end_src
* Markdown-mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown")
    :hook
    ((markdown-mode . flyspell-mode)
     (org-mode . flyspell-mode)))
#+end_src
* Minor conveniences
** Open configuration
#+begin_src emacs-lisp
  (defun config-open ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-open)
#+end_src
** Reload configuration
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
** Electric
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
#+end_src
#+begin_src emacs-lisp
  (electric-pair-mode t)
#+end_src
** Beacon
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+end_src
** Show parens
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src
** Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* Modeline
** Display line numbers
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src
* Moving
** Ivy
*** ivy-pkg
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t)
#+end_src
*** ivy-hydra
#+begin_src emacs-lisp
  (use-package ivy-hydra
    :ensure t)
#+end_src
*** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t)
#+end_src
*** config
#+begin_src emacs-lisp
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (setq counsel-grep-base-command
        "rg -i -M 120 --no-heading --line-number --color never '%s' %s")
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key "\C-s" 'counsel-grep-or-swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src

** Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src
** Windows and panes
*** Switch-window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :custom
    (switch-window-input-style 'minibuffer)
    (switch-window-increase 4)
    (switch-window-threshold 2)
    (switch-window-shortcut-style 'qwerty)
    (switch-window-qwerty-shortcuts
     '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
    :bind
    ([remap other-window] . switch-window))
#+end_src
*** Following windows split
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src
** Swiper
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t)
#+end_src
** Buffers
*** Always kill buffer
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src
*** Kill buffers without asking for confirmation
#+begin_src emacs-lisp
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
#+end_src
** Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
* Org
** Common settings
#+begin_src emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-font-lock-ensure t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src
** Line wrapping
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            '(lambda ()
               (visual-line-mode 1)))
#+end_src
** Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c '") 'org-edit-src-code)
#+end_src
** Org-roam
*** Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "mnt/idea-machine/slip-box")
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n g" . org-roam-graph)
                 ("C-c n d" . org-roam-dailies-capture-today))
                :map org-mode-map
                (("C-c n i" . org-roam-insert))
                (("C-c n I" . org-roam-insert-immediate))))
#+end_src
*** Bibliography
#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :ensure t
    :hook (org-roam-mode . org-roam-bibtex-mode))
#+end_src
*** Dailies
#+begin_src emacs-lisp
  (setq org-roam-dailies-directory "daily/")

  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           #'org-roam-capture--get-point
           "* %?"
           :file-name "daily/%<%Y-%m-%d>"
           :head "#+title: %<%Y-%m-%d>\n\n")))
#+end_src
*** Server
#+begin_src emacs-lisp
  (use-package org-roam-server
    :ensure t
    :config
    (setq org-roam-server-host "127.0.0.1"
          org-roam-server-port 8080
          org-roam-server-authenticate nil
          org-roam-server-export-inline-images t
          org-roam-server-serve-files nil
          org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
          org-roam-server-network-poll t
          org-roam-server-network-arrows nil
          org-roam-server-network-label-truncate t
          org-roam-server-network-label-truncate-length 60
          org-roam-server-network-label-wrap-length 20))
#+end_src
*** Protocol
#+begin_src emacs-lisp
  (require 'org-roam-protocol)
#+end_src
** Org-noter
#+begin_src emacs-lisp
  (use-package org-noter
    :ensure t
    :config
    (setq
     org-noter-notes-window-location 'other-frame
     org-noter-always-create-frame nil
     org-noter-hide-other nil
     )
    )

  (use-package pdf-tools
    :pin manual
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))

  (use-package nov
    :ensure t)

  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-tools-enable-minor-modes))
#+end_src
** Org-ref
#+begin_src emacs-lisp
  (use-package org-ref
    :ensure t
    :custom
    (reftex-default-bibliography '("mnt/idea-machine/slip-box/refs/references.bib"))
    (org-ref-default-bibliography '("mnt/idea-machine/slip-box/refs/references.bib"))
    :bind (:map org-roam-mode-map
                (("C-c ]" . org-ref-helm-insert-cite-link)
                 ("C-c n d" . org-roam-dailies-capture-today))))
#+end_src
** Helm-bibtex
#+begin_src emacs-lisp
  (use-package helm-bibtex
    :ensure t
    :custom
    (bibtex-completion-bibliography '("mnt/idea-machine/slip-box/refs/references.bib")))
** Org-capture
#+begin_src emacs-lisp
  (require 'org)

  ;; Files
  (setq org-directory "~/Documents/org")
  (setq org-agenda-files '("~/Documents/org"))

  ;; Capture
  (setq org-capture-templates
        `(("i" "Inbox" entry  (file "inbox.org")
          ,(concat "* TODO %?\n"
                   "/Entered on/ %U"))
          ("m" "Meeting" entry  (file+headline "agenda.org" "Future")
          ,(concat "* %? :meeting:\n"
                   "<%<%Y-%m-%d %a %H:00>>"))
          ("n" "Note" entry  (file "notes.org")
          ,(concat "* Note (%a)\n"
                   "/Entered on/ %U\n" "\n" "%?"))))

  (defun org-capture-inbox ()
       (interactive)
       (call-interactively 'org-store-link)
       (org-capture nil "i"))

  (defun org-capture-mail ()
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "@"))

  ;; Use full window for org-capture
  (add-hook 'org-capture-mode-hook 'delete-other-windows)

  ;; Key bindings
  (define-key global-map            (kbd "C-c a") 'org-agenda)
  (define-key global-map            (kbd "C-c c") 'org-capture)
  (define-key global-map            (kbd "C-c i") 'org-capture-inbox)

  ;; Refile
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-targets
        '(("projects.org" :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")))

  ;; TODO
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)")))
  (defun log-todo-next-creation-date (&rest ignore)
    "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
    (when (and (string= (org-get-todo-state) "NEXT")
               (not (org-entry-get nil "ACTIVATED")))
      (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))
  (add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)

  ;; Agenda
  (setq org-agenda-custom-commands
        '(("g" "Get Things Done (GTD)"
           ((agenda ""
                    ((org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'deadline))
                     (org-deadline-warning-days 0)))
            (todo "NEXT"
                  ((org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-agenda-prefix-format "  %i %-12:c [%e] ")
                   (org-agenda-overriding-header "\nTasks\n")))
            (agenda nil
                    ((org-agenda-entry-types '(:deadline))
                     (org-agenda-format-date "")
                     (org-deadline-warning-days 7)
                     (org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))
                     (org-agenda-overriding-header "\nDeadlines")))
            (tags-todo "inbox"
                       ((org-agenda-prefix-format "  %?-12t% s")
                        (org-agenda-overriding-header "\nInbox\n")))
            (tags "CLOSED>=\"<today>\""
                  ((org-agenda-overriding-header "\nCompleted today\n")))))))
#+end_src
* Programming
** Spaces instead of tabs
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src
** Specific languages
*** emacs-lisp
#+begin_src emacs-lisp
  (use-package slime
    :ensure t
    :custom
    (inferior-lisp-program "/usr/bin/sbcl")
    (slime-contribs '(slime-fancy))
    :hook (emacs-lisp-mode . eldoc-mode))
#+end_src
*** go
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :mode "\\.go\\'"
    :hook (before-save . gofmt-before-save))
#+end_src
*** lua
**** lua-mode
#+begin_src emacs-lisp
  (use-package lua-mode
    :ensure t
    :mode "\\.lua$")
#+end_src
*** racket
#+begin_src emacs-lisp
  (use-package racket-mode
    :ensure t)
#+end_src
*** clojure
#+begin_src emacs-lisp
  (use-package cider
    :ensure t)
#+end_src
*** rainbow
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+end_src
*** nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :ensure t
    :mode "\\.nix\\'")
#+end_src
*** rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t
    :config
    (define-key rust-mode-map (kbd "C-c C-c") 'rust-run))
#+end_src
*** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+end_src
* Ripgrep
#+begin_src emacs-lisp
  (use-package rg
    :ensure t
    :init
    (rg-enable-default-bindings))
#+end_src
* Spell check
#+begin_src emacs-lisp
  (setq ispell-program-name (executable-find "hunspell")
        ispell-dictionary "en_US")
#+end_src
* Theme
** Font
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook
            (lambda ()
              (variable-pitch-mode 1)))

  (set-face-attribute 'default nil :family "Cascadia Code" :height 120)
  (set-face-attribute 'fixed-pitch nil :family "Cascadia Code")
  (set-face-attribute 'variable-pitch nil :family "Roboto Mono")
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package plan9-theme
    :ensure t
    :init
    (load-theme 'plan9 t))
#+end_src
* Writeroom
#+begin_src emacs-lisp
  (use-package writeroom-mode
    :ensure t)
#+end_src
